# Docker machine commands

docker-machine ls
docker-machine start [machine name]
docker-machine stop [machine name]
docker-machine env [machine name]
docker-machine ip [machine name]
docker-machine status [machine name]
docker-machine regenerate-certs --client-certs [machine name]
docker-machine create -d hyperv --hyperv-virtual-switch [virtual switch name] [node name]





# Docker client commands

docker pull [image name]

docker run [image name]
docker run -p 80:80 --name [container name] [image name]  (where 80:80 is portOnHostMachine:portWithinContainer)

docker run -p 80:80 --name [conatiner name] -v /var/www [image name] (where -v /var/www will create a container volume)
docker run -p 80:80 --name [conatiner name] -v $(pwd):/var/www [image name] (where $(pwd) is for current working directory as volume source)
docker run -p 80:80 --name [conatiner name] -v %cd%:/var/www [image name]

docker inspect [conatiner id]

docker rm -v [container id]  (remove volume if no other container is using the vol).

#Run node image, map volume to current working directoy and run "npm start" on container start to run node application. -w is used to set working directory within the container where node start will be executed.
docker run -p 8080:3000 -v $(pwd):/var/www -w "/var/www" node npm start
docker run -p 8080:3000 -v %cd%:/var/www -w "/var/www" node npm start

#Run container interactively 
docker run -it -p 8080:80 -v %cd%:/app -w "/app" microsoft/aspnetcore-build /bin/bash
docker run -it -p 8080:80 -v %cd%:/app -w "/app" mcr.microsoft.com/dotnet/core/sdk:2.2 /bin/bash



docker exec -t 61de /bin/bash

docker images
docker ps
docker ps -a

docker stop [container id]
docker rm [container id]
docker rmi [image id]

# Stop and delete all containers
docker rm $(docker ps -a -q)
FOR /f "tokens=*" %i IN ('docker ps -q') DO docker stop %i
FOR /f "tokens=*" %i IN ('docker ps -a -q') DO docker rm %i

# Delete all images
docker rmi $(docker images -q)
FOR /f "tokens=*" %i IN ('docker images -q') DO docker rmi %i



# Create custom images

FROM
MAINTAINER
RUN
COPY
ENTRYPOINT
WORKDIR
EXPOSE
ENV
VOLUME

Example Dockerfile:
FROM 		node
MAINTAINER 	sandeepsinghmultani@gmail.com
COPY 		. /var/www
WORKDIR 	/var/www
EXPOSE		8080
ENTRYPOINT	["node","server.js"]


# Build image
docker build -f Dockerfile -t sandeepmultani/node .

docker build -f Dockerfile -t sandeepmultani/aspnetcore .

# Push image
docker push sandeepmultani/node


# Communicating between containers

Legacy Linking
1. Run a container with a name
2. Link to running container by name
3. Repeat for additional conatiners

docker run -d --name my-mongodb mongo
docker run -d -p 3000:3000 --link my-mongodb:mongodb sandeepmultani/node   (where container_name_to_link:aliase)


Container Network
1. Create a custom bridge network (use bridge network)
2. Run conatiner in a the network (it is possbile to run conatiner in multiple networks)

docker network ls
docker network inspect isolated_network

docker network create --driver bridge [name of the network]
docker run -d --net=[name of the network] --name [name of the container] [image name]

docker network rm isolated_network



# Docker compose
1. Build Services (docker-compose build)
2. Start Up Services (docker-compose up)
3. Tear Down Services (docker-compose down)


docker-compose build
docker-compose up
docker-compose down
docker-compose logs
docker-compose ps
docker-compose stop
docker-compose start
docker-compose rm

docker-compose up --no-deps node (up without dependencies)
docker-compose down --rmi all --volumes (remove images & volumes while remove conatiners)


#Kubernetes

Use compose on kubernetes on Docker for desktop (deploy a stack)
docker stack deploy --orchestrator=kubernetes -c docker-componse.yml hellokube

or Kompose (100% kubernetes)

kompose convert
kompose convert --out filename.yml
kompose up


kubectl version
kubectl get [deployment | services | pods]
kubectl run nginx-server --image=nginx:alpine
kubectl apply -f [fileName | folderName]
kubectl port-forward [name-of-pod] 8080:80
kubectl delete [deployment | services | pods] [name]
kubectl delete deployment nginx-server

kubectl delete -f [fileName | folderName]

kompose convert --out [filename].yml



Sample projects can be found here: https://github.com/DanWahlin/Docker-for-Web-Developers/
